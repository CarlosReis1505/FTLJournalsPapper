"""fltabular: Flower Example on Adult Census Income Tabular Dataset."""

from collections import OrderedDict

import torch
import torch.nn as nn
import torch.optim as optim
from flwr_datasets import FederatedDataset
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OrdinalEncoder, StandardScaler
from torch.utils.data import DataLoader, TensorDataset
from flwr_datasets.partitioner import IidPartitioner
import pandas as pd

from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score

from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score


fds = None  # Cache FederatedDataset


def load_data(partition_id: int, num_partitions: int):


    # Load dataset locally
    dataset_path = "data/Malware_dataset-01.csv"
    dataset = pd.read_csv(dataset_path)

    # Split into partitions
    partition_size = len(dataset) // num_partitions  # num_clients defined elsewhere
    
    #print("partition_size")
    #print(partition_size)
    
    start_idx = partition_id * partition_size
    
    end_idx = start_idx + partition_size
    
    client_partition = dataset.iloc[start_idx:end_idx] 
    #dataset = fds.load_partition(partition_id, "train").with_format("pandas")[:]

    dataset.dropna(inplace=True)

    categorical_cols = dataset.select_dtypes(include=["object"]).columns
    ordinal_encoder = OrdinalEncoder()
    dataset[categorical_cols] = ordinal_encoder.fit_transform(dataset[categorical_cols])


    X = dataset.drop("classification", axis=1)
    y = dataset["classification"]


    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.3, random_state=7
    )
    
    #print('shape --> ')
    #print(X.shape)
    
    #print("X_train")
    #print(X_train)
       
    #print("X_test")
    #print(X_test)
    
    #print("y_train")
    #print(y_train)
    
    #print("y_test")
    #print(y_test)

    
    numeric_features = X.select_dtypes(include=["float64", "int64"]).columns
    
    numeric_transformer = Pipeline(steps=[("scaler", StandardScaler())])
    

    preprocessor = ColumnTransformer(
        transformers=[("num", numeric_transformer, numeric_features)]
    )

    X_train = preprocessor.fit_transform(X_train)
    
    X_test = preprocessor.transform(X_test)
   
    X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
    
    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
    
    y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)
    
    y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32).view(-1, 1)

    train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
    
    
    test_dataset = TensorDataset(X_test_tensor, y_test_tensor)
    
    
    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
    
    test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)
    
   # print('<-- Fim Class load_data  --> ')
    return train_loader, test_loader


class IncomeClassifier(nn.Module):
    def __init__(self, input_dim: int = 34):
        super(IncomeClassifier, self).__init__()
        self.layer1 = nn.Linear(input_dim, 128)
        self.layer2 = nn.Linear(128, 64)
        self.output = nn.Linear(64, 1)
        self.relu = nn.ReLU()
        self.sigmoid = nn.Sigmoid()
    
   # print('<-- Inici0 Class IncomeClassifier  --> ')
    
    def forward(self, x):
        x = self.relu(self.layer1(x))
        x = self.relu(self.layer2(x))
        x = self.sigmoid(self.output(x))
        return x
    #print('<-- Fim Class IncomeClassifier  --> ')

#====================================================================================================================
def rocy(model, train_loader, test_loader, num_epochs=10):
    #=================================================================
    
    import torch
    
    from sklearn.metrics import roc_auc_score
    from sklearn.metrics import accuracy_score
    from sklearn.metrics import precision_score
    from sklearn.metrics import recall_score
    
    from sklearn.metrics import confusion_matrix
    import seaborn as sns
        
    # Move the model to a device
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    
   
    # Initialize lists to store metrics
    train_losses = []
    train_accuracies = []
    train_auc_scores = []
    test_losses = []
    test_accuracies = []
    test_auc_scores = []
    
    train_precisions = []
    train_recalls = []
    
    test_precisions = []
    test_recalls = []
    
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
    epochs = num_epochs
    
    #print("<<<<<<<<<<< Initialize lists to store metrics epochs >>>>>>>>>>>>>")
       
    for epoch in range(num_epochs):
        model.train()
    
        #========================================================
        train_loss_sum = 0.0
        num_correct_train = 0
        num_samples_train = 0
        y_true_train = []
        y_pred_train = []
        #========================================================
    
        for X_batch, y_batch in train_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)
            
            optimizer.zero_grad()
            outputs = model(X_batch)
            loss = criterion(outputs, y_batch)
            loss.backward()
            optimizer.step()
   
            #_, predictions = torch.max(outputs, 1)
            #num_correct_train += (predictions == y_batch).sum().item()
            #num_samples_train += y_batch.size(0)
            #y_true_train.extend(y_batch.cpu().numpy())
            #y_pred_train.extend(predictions.cpu().numpy())
            
            
            predicted = (outputs > 0.5).float()
            #total += y_batch.size(0)
            #correct += (predicted == y_batch).sum().item()
            
            num_correct_train += (predicted == y_batch).sum().item()
            num_samples_train += y_batch.size(0)
            y_true_train.extend(y_batch.cpu().numpy())
            y_pred_train.extend(predicted.cpu().numpy())

            train_loss_sum += loss.item()

        # Calculate training accuracy and AUC
        train_accuracy = num_correct_train / num_samples_train
        train_auc = roc_auc_score(y_true_train, y_pred_train)
        
        train_precision = precision_score(y_true_train, y_pred_train, zero_division=0)
        train_recall = recall_score(y_true_train, y_pred_train, zero_division=0)

        # Calculate average training loss
        average_train_loss = train_loss_sum / len(train_loader)

        model.eval()
        criterion = nn.BCELoss()
        loss = 0.0
        correct = 0
        total = 0
    
        #========================================================
        # Evaluate on the testing dataset
        test_loss_sum = 0.0
        num_correct_test = 0
        num_samples_test = 0
        y_true_test = []
        y_pred_test = []
        #========================================================
        
        with torch.no_grad():
            for X_batch, y_batch in test_loader:
                outputs = model(X_batch)
                batch_loss = criterion(outputs, y_batch)
                loss += batch_loss.item()
                predicted = (outputs > 0.5).float()
                total += y_batch.size(0)
                correct += (predicted == y_batch).sum().item()
            
                #================================================
                #predictions = torch.max(outputs, 1)
                #num_correct_test += (predictions == y_batch).float().sum().item()
                num_correct_test += (predicted == y_batch).sum().item()
                num_samples_test += y_batch.size(0)
                y_true_test.extend(y_batch.cpu().numpy())
                y_pred_test.extend(predicted.cpu().numpy())

                test_loss_sum += batch_loss.item()
            
            # Calculate testing accuracy and AUC
        test_accuracy = num_correct_test / num_samples_test
        test_auc = roc_auc_score(y_true_test, y_pred_test)
        
        test_precision = precision_score(y_true_test, y_pred_test, zero_division=0)
        test_recall = recall_score(y_true_test, y_pred_test, zero_division=0)

        # Calculate average testing loss
        average_test_loss = test_loss_sum / len(test_loader)
        
        # Gerando e exibindo a Matriz de Confus√£o
        conf_matrix = confusion_matrix(y_true_test, y_pred_test)

        # Print epoch-wise metrics
        
        print(f"Epoch [{epoch+1}/{epochs}] - "
                    f"Train Loss: {average_train_loss:.4f} - "
                    f"Train Acc: {train_accuracy:.4f} - "
                    f"Train AUC: {train_auc:.4f} - "
                    f"Train Prec: {train_precision:.4f} - "
                    f"Train Recall: {train_recall:.4f} - "
                    f"Test Loss: {average_test_loss:.4f} - "
                    f"Test Acc: {test_accuracy:.4f} - "
                    f"Test AUC: {test_auc:.4f} - "
                    f"Test Prec: {test_precision:.4f} - "
                    f"Test Recall: {test_recall:.4f} - "
                    f"Confusion matrix: {conf_matrix}")
                    

       
#====================================================================================================================

def train(model, train_loader, num_epochs=10):

    #print("<<<<< Create a PyTorch DataLoader for training and testing >>>>")
    # Move the model to a device
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    
    #========================================================
    # Initialize lists to store metrics
    train_losses = []
    train_accuracies = []
    train_auc_scores = []
    #========================================================
    
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
       
    for epoch in range(num_epochs):
        model.train()
    
        #========================================================
        train_loss_sum = 0.0
        num_correct_train = 0
        num_samples_train = 0
        y_true_train = []
        y_pred_train = []
        #========================================================
    
        for X_batch, y_batch in train_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)
            
            optimizer.zero_grad()
            outputs = model(X_batch)
            loss = criterion(outputs, y_batch)
            loss.backward()
            optimizer.step()
   
            #_, predictions = torch.max(outputs, 1)
            #num_correct_train += (predictions == y_batch).sum().item()
            #num_samples_train += y_batch.size(0)
            #y_true_train.extend(y_batch.cpu().numpy())
            #y_pred_train.extend(predictions.cpu().numpy())
            
            
            predicted = (outputs > 0.5).float()
            #total += y_batch.size(0)
            #correct += (predicted == y_batch).sum().item()
            
            num_correct_train += (predicted == y_batch).sum().item()
            num_samples_train += y_batch.size(0)
            y_true_train.extend(y_batch.cpu().numpy())
            y_pred_train.extend(predicted.cpu().numpy())

            train_loss_sum += loss.item()

        # Calculate training accuracy and AUC
        train_accuracy = num_correct_train / num_samples_train
        train_auc = roc_auc_score(y_true_train, y_pred_train)

        # Calculate average training loss
        average_train_loss = train_loss_sum / len(train_loader)

        # Print epoch-wise metrics
        print(f"Epoch [{epoch+1}/{num_epochs}] - "
          f"Train Loss: {average_train_loss:.4f} - "
          f"Train Acc: {train_accuracy:.4f} - "
          f"Train AUC: {train_auc:.4f} - ")
   


def evaluate(model, test_loader):
    
    #========================================================
    # Initialize lists to store metrics
    test_losses = []
    test_accuracies = []
    test_auc_scores = []
    #========================================================
    
    model.eval()
    criterion = nn.BCELoss()
    loss = 0.0
    correct = 0
    total = 0
    
    #========================================================
     # Evaluate on the testing dataset
    test_loss_sum = 0.0
    num_correct_test = 0
    num_samples_test = 0
    y_true_test = []
    y_pred_test = []
    #========================================================
        
    with torch.no_grad():
        for X_batch, y_batch in test_loader:
            outputs = model(X_batch)
            batch_loss = criterion(outputs, y_batch)
            loss += batch_loss.item()
            predicted = (outputs > 0.5).float()
            total += y_batch.size(0)
            correct += (predicted == y_batch).sum().item()
            
            #================================================
            #predictions = torch.max(outputs, 1)
            #num_correct_test += (predictions == y_batch).float().sum().item()
            num_correct_test += (predicted == y_batch).sum().item()
            num_samples_test += y_batch.size(0)
            y_true_test.extend(y_batch.cpu().numpy())
            y_pred_test.extend(predicted.cpu().numpy())

            test_loss_sum += batch_loss.item()
            
             # Calculate testing accuracy and AUC
        test_accuracy = num_correct_test / num_samples_test
        test_auc = roc_auc_score(y_true_test, y_pred_test)

        # Calculate average testing loss
        average_test_loss = test_loss_sum / len(test_loader)

        # Print epoch-wise metrics
        print(f"Epoch [{1}] - "
          f"Test Loss: {average_test_loss:.4f} - "
          f"Test Acc: {test_accuracy:.4f} - "
          f"Test AUC: {test_auc:.4f}")

    #================================================
                    
        accuracy = correct / total
        loss = loss / len(test_loader)
        return loss, accuracy

def roc(model, train_loader, test_loader, num_epochs=10):
    #=================================================================
    
    import torch
    
    from sklearn.metrics import roc_auc_score
    from sklearn.metrics import accuracy_score
    
        
    # Move the model to a device
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    
   
    # Initialize lists to store metrics
    train_losses = []
    train_accuracies = []
    train_auc_scores = []
    test_losses = []
    test_accuracies = []
    test_auc_scores = []
    
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
    epochs = num_epochs
    
    #print("<<<<<<<<<<< Initialize lists to store metrics epochs >>>>>>>>>>>>>")
       
    for epoch in range(num_epochs):
        model.train()
    
        #========================================================
        train_loss_sum = 0.0
        num_correct_train = 0
        num_samples_train = 0
        y_true_train = []
        y_pred_train = []
        #========================================================
    
        for X_batch, y_batch in train_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)
            
            optimizer.zero_grad()
            outputs = model(X_batch)
            loss = criterion(outputs, y_batch)
            loss.backward()
            optimizer.step()
   
            #_, predictions = torch.max(outputs, 1)
            #num_correct_train += (predictions == y_batch).sum().item()
            #num_samples_train += y_batch.size(0)
            #y_true_train.extend(y_batch.cpu().numpy())
            #y_pred_train.extend(predictions.cpu().numpy())
            
            
            predicted = (outputs > 0.5).float()
            #total += y_batch.size(0)
            #correct += (predicted == y_batch).sum().item()
            
            num_correct_train += (predicted == y_batch).sum().item()
            num_samples_train += y_batch.size(0)
            y_true_train.extend(y_batch.cpu().numpy())
            y_pred_train.extend(predicted.cpu().numpy())

            train_loss_sum += loss.item()

        # Calculate training accuracy and AUC
        train_accuracy = num_correct_train / num_samples_train
        train_auc = roc_auc_score(y_true_train, y_pred_train)

        # Calculate average training loss
        average_train_loss = train_loss_sum / len(train_loader)

        model.eval()
        criterion = nn.BCELoss()
        loss = 0.0
        correct = 0
        total = 0
    
        #========================================================
        # Evaluate on the testing dataset
        test_loss_sum = 0.0
        num_correct_test = 0
        num_samples_test = 0
        y_true_test = []
        y_pred_test = []
        #========================================================
        
        with torch.no_grad():
            for X_batch, y_batch in test_loader:
                outputs = model(X_batch)
                batch_loss = criterion(outputs, y_batch)
                loss += batch_loss.item()
                predicted = (outputs > 0.5).float()
                total += y_batch.size(0)
                correct += (predicted == y_batch).sum().item()
            
                #================================================
                #predictions = torch.max(outputs, 1)
                #num_correct_test += (predictions == y_batch).float().sum().item()
                num_correct_test += (predicted == y_batch).sum().item()
                num_samples_test += y_batch.size(0)
                y_true_test.extend(y_batch.cpu().numpy())
                y_pred_test.extend(predicted.cpu().numpy())

                test_loss_sum += batch_loss.item()
            
            # Calculate testing accuracy and AUC
        test_accuracy = num_correct_test / num_samples_test
        test_auc = roc_auc_score(y_true_test, y_pred_test)

        # Calculate average testing loss
        average_test_loss = test_loss_sum / len(test_loader)

        # Print epoch-wise metrics
        print(f"Epoch [{epoch+1}/{epochs}] - "
                    f"Train Loss: {average_train_loss:.4f} - "
                    f"Train Acc: {train_accuracy:.4f} - "
                    f"Train AUC: {train_auc:.4f} - "
                    f"Test Loss: {average_test_loss:.4f} - "
                    f"Test Acc: {test_accuracy:.4f} - "
                    f"Test AUC: {test_auc:.4f}")

        # Store metrics for later analysis or plotting
        #train_losses.append(average_train_loss)
        #train_accuracies.append(train_accuracy)
        #train_auc_scores.append(train_auc)
        #test_losses.append(average_test_loss)
        #test_accuracies.append(test_accuracy)
        #test_auc_scores.append(test_auc)



def set_weights(net, parameters):
    params_dict = zip(net.state_dict().keys(), parameters)
    state_dict = OrderedDict({k: torch.tensor(v) for k, v in params_dict})
    net.load_state_dict(state_dict, strict=True)


def get_weights(net):
    ndarrays = [val.cpu().numpy() for _, val in net.state_dict().items()]
    return ndarrays