"""PyTorch CIFAR-10 image classification.

The code is generally adapted from 'PyTorch: A 60 Minute Blitz'. Further
explanations are given in the official PyTorch tutorial:

https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html
"""

# mypy: ignore-errors
# pylint: disable=W0223


from typing import Tuple

import torch
import torch.nn as nn
import torch.nn.functional as F
from flwr_datasets import FederatedDataset
from torch import Tensor
from torchvision.transforms import Compose, Normalize, ToTensor

import torch.optim as optim
from flwr_datasets import FederatedDataset
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OrdinalEncoder, StandardScaler
from torch.utils.data import DataLoader, TensorDataset
from flwr_datasets.partitioner import IidPartitioner
import pandas as pd

from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score

import time
import timeit
     
    
    

class Net(nn.Module):
    def __init__(self, input_dim: int = 34):
        super(Net, self).__init__()
        self.layer1 = nn.Linear(input_dim, 128)
        self.layer2 = nn.Linear(128, 64)
        self.output = nn.Linear(64, 1)
        self.relu = nn.ReLU()
        self.sigmoid = nn.Sigmoid()
 
    def forward(self, x):
        x = self.relu(self.layer1(x))
        x = self.relu(self.layer2(x))
        x = self.sigmoid(self.output(x))
        return x

   
def load_data(partition_id: int):

    # Load dataset locally
    dataset_path = "data/Malware_dataset.csv"
    dataset = pd.read_csv(dataset_path)

   # # Split into partitions
    partition_size = len(dataset) 
    #//  num_partitions  # num_clients defined elsewhere
    
    start_idx = partition_id * partition_size
    
    end_idx = start_idx + partition_size
    
    client_partition = dataset.iloc[start_idx:end_idx] 

    #dataset = fds.load_partition(partition_id, "train").with_format("pandas")[:]

    dataset.dropna(inplace=True)

    categorical_cols = dataset.select_dtypes(include=["object"]).columns
    ordinal_encoder = OrdinalEncoder()
    dataset[categorical_cols] = ordinal_encoder.fit_transform(dataset[categorical_cols])


    X = dataset.drop("classification", axis=1)
    y = dataset["classification"]


    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.3, random_state=7
    )

    print("X_train")
    print(X_train)
       
    print("X_test")
    print(X_test)
    
    print("y_train")
    print(y_train)
    
    print("y_test")
    print(y_test)
    
    numeric_features = X.select_dtypes(include=["int32","float64", "int64"]).columns
    
    numeric_transformer = Pipeline(steps=[("scaler", StandardScaler())])
    

    preprocessor = ColumnTransformer(
        transformers=[("num", numeric_transformer, numeric_features)]
    )


    X_train = preprocessor.fit_transform(X_train)
    
    
    X_test = preprocessor.transform(X_test)

    
    X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
    
    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
    
    y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32).view(-1, 1)
    
    y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32).view(-1, 1)

    train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
    
    test_dataset = TensorDataset(X_test_tensor, y_test_tensor)
    
    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
    
    test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)
    
    print('<-- Fim Class load_data  --> ')
    return train_loader, test_loader

#===================================================================================================================
def rocy(model, train_loader, test_loader, num_epochs=1):
    #=================================================================
    print("<<<<< Training loop >>>>")
    
    import torch
    
    from sklearn.metrics import roc_auc_score
    from sklearn.metrics import accuracy_score
    from sklearn.metrics import precision_score
    from sklearn.metrics import recall_score
    
    from sklearn.metrics import confusion_matrix
    import seaborn as sns
    


    
    print("<<<<< Create a PyTorch DataLoader for training and testing >>>>")
    # Move the model to a device
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    
    print("<<<<<<<<<<< Initialize lists to store metrics >>>>>>>>>>>>>")

    # Initialize lists to store metrics
    train_epochs = []
    train_losses = []
    train_accuracies = []
    train_auc_scores = []
    train_precisions = []
    train_recalls = []
    test_losses = []
    test_accuracies = []
    test_auc_scores = []
    test_precisions = []
    test_recalls = []

    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    epochs = num_epochs

    print("<<<<<<<<<<< Initialize lists to store metrics epochs >>>>>>>>>>>>>")

    for epoch in range(num_epochs):
        model.train()

        #========================================================
        train_loss_sum = 0.0
        num_correct_train = 0
        num_samples_train = 0
        y_true_train = []
        y_pred_train = []
        #========================================================

        for X_batch, y_batch in train_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)

            optimizer.zero_grad()
            outputs = model(X_batch)
            loss = criterion(outputs, y_batch)
            loss.backward()
            optimizer.step()

            predicted = (outputs > 0.5).float()

            num_correct_train += (predicted == y_batch).sum().item()
            num_samples_train += y_batch.size(0)
            y_true_train.extend(y_batch.cpu().numpy())
            y_pred_train.extend(predicted.cpu().numpy())

            train_loss_sum += loss.item()

        # Calculate training metrics
        train_accuracy = num_correct_train / num_samples_train
        train_auc = roc_auc_score(y_true_train, y_pred_train)
        train_precision = precision_score(y_true_train, y_pred_train, zero_division=0)
        train_recall = recall_score(y_true_train, y_pred_train, zero_division=0)

        # Calculate average training loss
        average_train_loss = train_loss_sum / len(train_loader)

        model.eval()
        test_loss_sum = 0.0
        num_correct_test = 0
        num_samples_test = 0
        y_true_test = []
        y_pred_test = []

        with torch.no_grad():
            for X_batch, y_batch in test_loader:
                outputs = model(X_batch)
                batch_loss = criterion(outputs, y_batch)

                predicted = (outputs > 0.5).float()

                num_correct_test += (predicted == y_batch).sum().item()
                num_samples_test += y_batch.size(0)
                y_true_test.extend(y_batch.cpu().numpy())
                y_pred_test.extend(predicted.cpu().numpy())

                test_loss_sum += batch_loss.item()
                
                

        # Calculate testing metrics
        test_accuracy = num_correct_test / num_samples_test
        test_auc = roc_auc_score(y_true_test, y_pred_test)
        test_precision = precision_score(y_true_test, y_pred_test, zero_division=0)
        test_recall = recall_score(y_true_test, y_pred_test, zero_division=0)

        # Calculate average testing loss
        average_test_loss = test_loss_sum / len(test_loader)
        
        # Gerando e exibindo a Matriz de Confusão
        conf_matrix = confusion_matrix(y_true_test, y_pred_test)

        # Print epoch-wise metrics
        print(f"Epoch [{epoch+1}/{epochs}] - "
            f"Train Loss: {average_train_loss:.4f} - "
            f"Train Acc: {train_accuracy:.4f} - "
            f"Train AUC: {train_auc:.4f} - "
            f"Train Prec: {train_precision:.4f} - "
            f"Train Recall: {train_recall:.4f} - "
            f"Test Loss: {average_test_loss:.4f} - "
            f"Test Acc: {test_accuracy:.4f} - "
            f"Test AUC: {test_auc:.4f} - "
            f"Test Prec: {test_precision:.4f} - "
            f"Test Recall: {test_recall:.4f} - "
            f"Confusion matrix: {conf_matrix}"
            )

        # Store metrics for later analysis or plotting
        train_epochs.append(epoch)

        train_losses.append(f"{average_train_loss:.4f}")
        test_losses.append(f"{average_test_loss:.4f}")

        train_accuracies.append(f"{train_accuracy:.4f}")
        test_accuracies.append(f"{test_accuracy:.4f}")

        train_auc_scores.append(f"{train_auc:.4f}")
        test_auc_scores.append(f"{test_auc:.4f}")

        train_precisions.append(f"{train_precision:.4f}")
        test_precisions.append(f"{test_precision:.4f}")

        train_recalls.append(f"{train_recall:.4f}")
        test_recalls.append(f"{test_recall:.4f}")
   
   # Gerando e exibindo a Matriz de Confusão
    conf_matrix = confusion_matrix(y_true_test, y_pred_test)

    import matplotlib.pyplot as plt

    plt.figure(figsize=(6, 5))
    sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=["Negative", "Positive"], yticklabels=["Negative", "Positive"])
    plt.xlabel('Predito')
    plt.ylabel('Real')
    plt.title('Matriz de Confusão - Teste')
    plt.show()   

    
    # Gráfico de Loss
    #plt.figure(figsize=(15, 4))

    # Subplot para perda (Loss)
    plt.subplot(1, 1, 1)
    plt.plot(train_epochs, train_losses, label='Train Loss', color='blue', marker='o')
    plt.plot(train_epochs, test_losses, label='Test Loss', color='red', marker='o')
    plt.title('Train Loss - Flower - Malware Detection')
    plt.xlabel('Época')
    plt.ylabel('Perda (Loss)')
    plt.legend()
    plt.grid(True)
    
    # Ajustar layout e mostrar os gráficos
    plt.tight_layout()
    plt.show()
       
    # Subplot para acurácia (Accuracy)
    plt.subplot(1, 1, 1)
    plt.plot(train_epochs, train_accuracies, label='Train Accuracy', color='blue', marker='o')
    plt.plot(train_epochs, test_accuracies, label='Test Accuracy', color='red', marker='o')
    plt.title('Train Accuracy - Flower - Malware Detection')
    plt.xlabel('Época')
    plt.ylabel('Acurácia')
    plt.legend()
    plt.grid(True)

    # Ajustar layout e mostrar os gráficos
    plt.tight_layout()
    plt.show()
       
    # Subplot para AUC
    plt.subplot(1, 1, 1)
    plt.plot(train_epochs, train_auc_scores, label='Train AUC', color='blue', marker='o')
    plt.plot(train_epochs, test_auc_scores, label='Test AUC', color='red', marker='o')
    plt.title('Train AUC - Flower - Malware Detection')
    plt.xlabel('Época')
    plt.ylabel('AUC')
    plt.legend()
    plt.grid(True)
    
    # Ajustar layout e mostrar os gráficos
    plt.tight_layout()
    plt.show()
    
    # Subplot para Precisions
    plt.subplot(1, 1, 1)
    plt.plot(train_epochs, train_precisions, label='Train Precision', color='blue', marker='o')
    plt.plot(train_epochs, test_precisions, label='Test Precision', color='red', marker='o')
    plt.title('Train Precision - Flower - Malware Detection')
    plt.xlabel('Época')
    plt.ylabel('Precision')
    plt.legend()
    plt.grid(True)
    
    # Ajustar layout e mostrar os gráficos
    plt.tight_layout()
    plt.show()
        
    plt.subplot(1, 1, 1)
    plt.plot(train_epochs, train_recalls, label='Train Recall', color='blue', marker='o')
    plt.plot(train_epochs, test_recalls, label='Test Recall', color='red', marker='o')
    plt.title('Train Recall - Flower - Malware Detection')
    plt.xlabel('Época')
    plt.ylabel('Recall')
    plt.legend()
    plt.grid(True)
    
    # Ajustar layout e mostrar os gráficos
    plt.tight_layout()
    plt.show()
   
   
   
   
#===================================================================================================================
def train(model, train_loader, num_epochs=10):

    print("<<<<< Create a PyTorch DataLoader for training and testing >>>>")
    # Move the model to a device
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    
    print("<<<<<<<<<<< Initialize lists to store metrics >>>>>>>>>>>>>")

     #========================================================
    # Initialize lists to store metrics
    train_losses = []
    train_accuracies = []
    train_auc_scores = []
    #========================================================
    
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
       
    for epoch in range(num_epochs):
        model.train()
    
        #========================================================
        train_loss_sum = 0.0
        num_correct_train = 0
        num_samples_train = 0
        y_true_train = []
        y_pred_train = []
        #========================================================
    
        for X_batch, y_batch in train_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)
            
            optimizer.zero_grad()
            outputs = model(X_batch)
            loss = criterion(outputs, y_batch)
            loss.backward()
            optimizer.step()
   
            #_, predictions = torch.max(outputs, 1)
            #num_correct_train += (predictions == y_batch).sum().item()
            #num_samples_train += y_batch.size(0)
            #y_true_train.extend(y_batch.cpu().numpy())
            #y_pred_train.extend(predictions.cpu().numpy())
            
            
            predicted = (outputs > 0.5).float()
            #total += y_batch.size(0)
            #correct += (predicted == y_batch).sum().item()
            
            num_correct_train += (predicted == y_batch).sum().item()
            num_samples_train += y_batch.size(0)
            y_true_train.extend(y_batch.cpu().numpy())
            y_pred_train.extend(predicted.cpu().numpy())

            train_loss_sum += loss.item()

        # Calculate training accuracy and AUC
        train_accuracy = num_correct_train / num_samples_train
        train_auc = roc_auc_score(y_true_train, y_pred_train)

        # Calculate average training loss
        average_train_loss = train_loss_sum / len(train_loader)

        # Print epoch-wise metrics
        print(f"Epoch [{epoch+1}/{num_epochs}] - "
          f"Train Loss: {average_train_loss:.4f} - "
          f"Train Acc: {train_accuracy:.4f} - "
          f"Train AUC: {train_auc:.4f} - ")


def test(
    net: Net,
    testloader: torch.utils.data.DataLoader,
    device: torch.device,  # pylint: disable=no-member
) -> Tuple[float, float]:
    """Validate the network on the entire test set."""
    # Define loss and metrics
    criterion = nn.CrossEntropyLoss()
    correct, loss = 0, 0.0

    # Evaluate the network
    net.to(device)
    net.eval()
    with torch.no_grad():
        for data in testloader:
            images, labels = data["img"].to(device), data["label"].to(device)
            outputs = net(images)
            loss += criterion(outputs, labels).item()
            _, predicted = torch.max(outputs.data, 1)  # pylint: disable=no-member
            correct += (predicted == labels).sum().item()
    accuracy = correct / len(testloader.dataset)
    return loss, accuracy

def evaluate(model, test_loader):
    
   #========================================================
    # Initialize lists to store metrics
    test_losses = []
    test_accuracies = []
    test_auc_scores = []
    #========================================================
    
    model.eval()
    criterion = nn.BCELoss()
    loss = 0.0
    correct = 0
    total = 0
    
    #========================================================
     # Evaluate on the testing dataset
    test_loss_sum = 0.0
    num_correct_test = 0
    num_samples_test = 0
    y_true_test = []
    y_pred_test = []
    #========================================================
        
    with torch.no_grad():
        for X_batch, y_batch in test_loader:
            outputs = model(X_batch)
            batch_loss = criterion(outputs, y_batch)
            loss += batch_loss.item()
            predicted = (outputs > 0.5).float()
            total += y_batch.size(0)
            correct += (predicted == y_batch).sum().item()
            
            #================================================
            #predictions = torch.max(outputs, 1)
            #num_correct_test += (predictions == y_batch).float().sum().item()
            num_correct_test += (predicted == y_batch).sum().item()
            num_samples_test += y_batch.size(0)
            y_true_test.extend(y_batch.cpu().numpy())
            y_pred_test.extend(predicted.cpu().numpy())

            test_loss_sum += batch_loss.item()
            
             # Calculate testing accuracy and AUC
    test_accuracy = num_correct_test / num_samples_test
    test_auc = roc_auc_score(y_true_test, y_pred_test)

    # Calculate average testing loss
    average_test_loss = test_loss_sum / len(test_loader)

    # Print epoch-wise metrics
    print(f"Epoch [{1}] - "
          f"Test Loss: {average_test_loss:.4f} - "
          f"Test Acc: {test_accuracy:.4f} - "
          f"Test AUC: {test_auc:.4f}")

    #================================================
                    
    accuracy = correct / total
    loss = loss / len(test_loader)
    return loss, accuracy


def roc(model, train_loader, test_loader, num_epochs=1):
    #=================================================================
    print("<<<<< Training loop >>>>")
    
    import torch
    
    from sklearn.metrics import roc_auc_score
    from sklearn.metrics import accuracy_score
    
        
    print("<<<<< Create a PyTorch DataLoader for training and testing >>>>")
    # Move the model to a device
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    
    print("<<<<<<<<<<< Initialize lists to store metrics >>>>>>>>>>>>>")

    # Initialize lists to store metrics
    train_epochs = []
    train_losses = []
    train_accuracies = []
    train_auc_scores = []
    test_losses = []
    test_accuracies = []
    test_auc_scores = []
    
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
    epochs = num_epochs
    
    print("<<<<<<<<<<< Initialize lists to store metrics epochs >>>>>>>>>>>>>")
       
    for epoch in range(num_epochs):
        model.train()
    
        #========================================================
        train_loss_sum = 0.0
        num_correct_train = 0
        num_samples_train = 0
        y_true_train = []
        y_pred_train = []
        #========================================================
    
        for X_batch, y_batch in train_loader:
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)
            
            optimizer.zero_grad()
            outputs = model(X_batch)
            loss = criterion(outputs, y_batch)
            loss.backward()
            optimizer.step()
   
            #_, predictions = torch.max(outputs, 1)
            #num_correct_train += (predictions == y_batch).sum().item()
            #num_samples_train += y_batch.size(0)
            #y_true_train.extend(y_batch.cpu().numpy())
            #y_pred_train.extend(predictions.cpu().numpy())
            
            
            predicted = (outputs > 0.5).float()
            #total += y_batch.size(0)
            #correct += (predicted == y_batch).sum().item()
            
            num_correct_train += (predicted == y_batch).sum().item()
            num_samples_train += y_batch.size(0)
            y_true_train.extend(y_batch.cpu().numpy())
            y_pred_train.extend(predicted.cpu().numpy())

            train_loss_sum += loss.item()

        # Calculate training accuracy and AUC
        train_accuracy = num_correct_train / num_samples_train
        train_auc = roc_auc_score(y_true_train, y_pred_train)

        # Calculate average training loss
        average_train_loss = train_loss_sum / len(train_loader)

        model.eval()
        criterion = nn.BCELoss()
        loss = 0.0
        correct = 0
        total = 0
    
        #========================================================
        # Evaluate on the testing dataset
        test_loss_sum = 0.0
        num_correct_test = 0
        num_samples_test = 0
        y_true_test = []
        y_pred_test = []
        #========================================================
        
        with torch.no_grad():
            for X_batch, y_batch in test_loader:
                outputs = model(X_batch)
                batch_loss = criterion(outputs, y_batch)
                loss += batch_loss.item()
                predicted = (outputs > 0.5).float()
                total += y_batch.size(0)
                correct += (predicted == y_batch).sum().item()
            
                #================================================
                #predictions = torch.max(outputs, 1)
                #num_correct_test += (predictions == y_batch).float().sum().item()
                num_correct_test += (predicted == y_batch).sum().item()
                num_samples_test += y_batch.size(0)
                y_true_test.extend(y_batch.cpu().numpy())
                y_pred_test.extend(predicted.cpu().numpy())

                test_loss_sum += batch_loss.item()
            
            # Calculate testing accuracy and AUC
        test_accuracy = num_correct_test / num_samples_test
        test_auc = roc_auc_score(y_true_test, y_pred_test)

        # Calculate average testing loss
        average_test_loss = test_loss_sum / len(test_loader)
        cont_epoch = epoch
        # Print epoch-wise metrics
        print(f"Epoch [{epoch+1}/{epochs}] - "
                    f"Train Loss: {average_train_loss:.4f} - "
                    f"Train Acc: {train_accuracy:.4f} - "
                    f"Train AUC: {train_auc:.4f} - "
                    f"Test Loss: {average_test_loss:.4f} - "
                    f"Test Acc: {test_accuracy:.4f} - "
                    f"Test AUC: {test_auc:.4f}")

        # Store metrics for later analysis or plotting
        
        train_epochs.append(cont_epoch)
        
        #train_losses.append(average_train_loss)
        train_losses.append(f"{average_train_loss:.4f}")
        #test_losses.append(average_test_loss)
        test_losses.append(f"{average_test_loss:.4f}")
        
        #train_accuracies.append(train_accuracy)
        train_accuracies.append(f"{train_accuracy:.4f}")
       
        #test_accuracies.append(test_accuracy)
        test_accuracies.append(f"{test_accuracy:.4f}")
        
        #train_auc_scores.append(train_auc)
        train_auc_scores.append(f"{train_auc:.4f}")
        
        #test_auc_scores.append(test_auc)
        test_auc_scores.append(f"{test_auc:.4f}")
       
        #print("<<<<<<<<<<< Store metrics for later analysis or plotting >>>>>>>>>>>>>")
        
        #print("train_epochs --> ")
        #print(train_epochs)
        #epochs = train_epochs
                   
        #print("train_losses --> ")
        #print(train_losses)
        #formatted_train_losses = [f'{loss:.4f}' for loss in train_losses]
        #train_loss = formatted_train_losses
        
        #print("test_losses --> ")
        #print(test_losses)
        #formatted_test_losses = [f'{loss:.4f}' for loss in test_losses]
        #test_loss = formatted_test_losses
                
        #print("train_accuracies --> ")
        #print(train_accuracies)
        #formatted_train_train_accuracy = [f'{loss:.4f}' for loss in train_accuracy]
        #train_accuracy = formatted_train_train_accuracy
       
        #print("test_accuracies --> ")
        #print(test_accuracies)
        #formatted_test_accuracies = [f'{loss:.4f}' for loss in test_accuracies]
        #test_accuracy = formatted_test_accuracies
        
        #print("train_auc_scores --> ")
        #print(train_auc_scores)
        #formatted_train_auc_scores = [f'{loss:.4f}' for loss in train_auc_scores]
        #train_auc = formatted_train_auc_scores
                
        #print("test_auc_scores --> ")
        #print(test_auc_scores)
        #formatted_test_auc_scores = [f'{loss:.4f}' for loss in test_auc_scores]
        #test_auc = formatted_test_auc_scores
        
        
    import matplotlib.pyplot as plt
    
    # Gráfico de Loss
    plt.figure(figsize=(18, 6))

    # Subplot para perda (Loss)
    plt.subplot(1, 3, 1)
    plt.plot(train_epochs, train_losses, label='Train Loss', color='blue', marker='o')
    plt.plot(train_epochs, test_losses, label='Test Loss', color='red', marker='o')
    plt.title('Loss durante o treinamento')
    plt.xlabel('Época')
    plt.ylabel('Perda (Loss)')
    plt.legend()
    plt.grid(True)

    # Subplot para acurácia (Accuracy)
    plt.subplot(1, 3, 2)
    plt.plot(train_epochs, train_accuracies, label='Train Accuracy', color='blue', marker='o')
    plt.plot(train_epochs, test_accuracies, label='Test Accuracy', color='red', marker='o')
    plt.title('Acurácia durante o treinamento')
    plt.xlabel('Época')
    plt.ylabel('Acurácia')
    plt.legend()
    plt.grid(True)

    # Subplot para AUC
    plt.subplot(1, 3, 3)
    plt.plot(train_epochs, train_auc_scores, label='Train AUC', color='blue', marker='o')
    plt.plot(train_epochs, test_auc_scores, label='Test AUC', color='red', marker='o')
    plt.title('AUC durante o treinamento')
    plt.xlabel('Época')
    plt.ylabel('AUC')
    plt.legend()
    plt.grid(True)

    # Ajustar layout e mostrar os gráficos
    plt.tight_layout()
    plt.show()




def main():
    
    inicio = timeit.default_timer()
    
    DEVICE = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    print("Centralized PyTorch training")
    print("Load data")
    
    trainloader, testloader = load_data(0)
    net = Net().to(DEVICE)
    net.eval()
    print("Start training")
    #train(net=net, trainloader=trainloader, epochs=2, device=DEVICE)
    #train(net, trainloader, 10)
    #print("Evaluate model")
    #loss, accuracy = test(net=net, testloader=testloader, device=DEVICE)
    #loss, accuracy = evaluate(net, testloader)
    
    rocy(net, trainloader, testloader, num_epochs=10)
    
    #print("Loss: ", loss)
    #print("Accuracy: ", accuracy)

    fim = timeit.default_timer()
    print ('duracao: %f' % (fim - inicio))

if __name__ == "__main__":
    main()




